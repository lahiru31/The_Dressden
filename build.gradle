buildscript {
    ext {
        androidGradlePlugin = '8.8.0'  // Updated to be compatible with Gradle 8.10.2
        kotlinVersion = '1.9.22'
        googleServicesVersion = '4.4.2'
        firebaseCrashlyticsVersion = '2.9.9'
        hiltVersion = '2.50'
        kspVersion = '1.9.22-1.0.17'
    }
    
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$androidGradlePlugin"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.google.gms:google-services:$googleServicesVersion"
        classpath "com.google.firebase:firebase-crashlytics-gradle:$firebaseCrashlyticsVersion"
        classpath "com.google.dagger:hilt-android-gradle-plugin:$hiltVersion"
        classpath "com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin:$kspVersion"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

tasks.register('clean', Delete) {
    delete rootProject.buildDir
    delete "${rootProject.projectDir}/.gradle-cache"
    delete "${rootProject.projectDir}/.gradle-wrapper"
    delete "${rootProject.projectDir}/.android-cache"
}

allprojects {
    tasks.withType(JavaCompile) {
        options.fork = true
        options.incremental = true
    }

    // Configure build cache
    buildCache {
        local {
            directory = file("${rootProject.projectDir}/.gradle-cache")
            removeUnusedEntriesAfterDays = 30
        }
    }
}

// Ensure cache directories exist
tasks.register('createCacheDirs') {
    doFirst {
        file("${rootProject.projectDir}/.gradle-cache").mkdirs()
        file("${rootProject.projectDir}/.gradle-wrapper").mkdirs()
        file("${rootProject.projectDir}/.android-cache").mkdirs()
    }
}

// Run createCacheDirs before any build task
tasks.whenTaskAdded { task ->
    if (task.name.contains("compile") || task.name.contains("build")) {
        task.dependsOn('createCacheDirs')
    }
}
