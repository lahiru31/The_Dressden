buildscript {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${androidGradlePlugin}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "com.google.gms:google-services:${googleServicesVersion}"
        classpath "com.google.firebase:firebase-crashlytics-gradle:${firebaseCrashlyticsVersion}"
    }
}

// Set JDK compatibility for all projects
allprojects {
    tasks.withType(JavaCompile).configureEach {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = '17'
            freeCompilerArgs += [
                '-opt-in=kotlin.RequiresOptIn',
                '-Xjvm-default=all'
            ]
        }
    }
}

// Configure Gradle cache settings
gradle.projectsLoaded {
    rootProject.allprojects {
        buildDir = layout.buildDirectory.dir("${rootProject.buildDir}/${project.name}").get().asFile
    }
}

// Clean up old cache directories
tasks.register('cleanCache') {
    doLast {
        def cacheDir = new File(gradle.gradleUserHomeDir, 'caches')
        if (cacheDir.exists()) {
            cacheDir.eachDir { dir ->
                try {
                    if (dir.name != '8.9') {
                        dir.deleteDir()
                        println "Deleted old cache directory: ${dir.name}"
                    }
                } catch (Exception e) {
                    println "Failed to delete directory ${dir.name}: ${e.message}"
                }
            }
        }
    }
}

// Run cache cleanup before build
tasks.named('build').configure {
    dependsOn 'cleanCache'
}
